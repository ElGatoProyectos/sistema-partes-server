// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider        = "prisma-client-js"
  //para omitir campos
  previewFeatures = ["omitApi"]
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

enum E_Rol_BD {
  ADMIN // Alejandro
  USER //  Capaz superior a la de abajo
  GERENTE_PROYECTO
  RESIDENCIA
  CONTROL_COSTOS
  ASISTENTE_CONTROL_COSTOS
  INGENIERO_PRODUCCION
  ASISTENTE_PRODUCCION
  MAESTRO_OBRA
  CAPATAZ
  ADMINISTRACION_OBRA
  INGENIERO_SSOMMA
  ASISTENTE_SSOMMA
  LOGISTICA
  ASISTENTE_ALMACEN
}

enum E_Estado_Riesgo_BD {
  PENDIENTE
  SOLUCIONADO
}

enum E_Categoria_Salarial_Obrero_BD {
  BASICO
  INTERMEDIO
  AVANZADO
}

enum E_Riesgo_BD {
  BAJO
  MEDIO
  ALTO
}

//si esta activo o no 
enum E_Estado_BD {
  y
  n
}

enum E_Estado_MO_BD {
  ACTIVO
  INACTIVO
}

enum E_TIPO_PARENTESCO_BD {
  PADRE
  MADRE
  HIJO
  HIJA
  ABUELO
  ABUELA
  SOBRINA
  SOBRINO
}

enum E_Proyecto_Estado {
  CREADO
  PROGRAMADO
  EJECUCION
  TERMINADO
}

enum E_Trabajo_Estado {
  PROGRAMADO
  EJECUTADO
  TERMINADO
}

model Rol {
  id                Int         @id @default(autoincrement())
  nombre_secundario String
  descripcion       String
  rol               String
  Usuario           Usuario[]
  eliminado         E_Estado_BD @default(n)
  Permisos          Permisos[]
}

model Seccion {
  id       Int        @id @default(autoincrement())
  nombre   String
  Permisos Permisos[]
}

model Accion {
  id       Int        @id @default(autoincrement())
  nombre   String
  Permisos Permisos[]
}

model Permisos {
  id         Int     @id @default(autoincrement())
  seccion_id Int
  accion_id  Int
  rol_id     Int
  Rol        Rol     @relation(fields: [rol_id], references: [id], onDelete: Cascade)
  Seccion    Seccion @relation(fields: [seccion_id], references: [id], onDelete: Cascade)
  Accion     Accion  @relation(fields: [accion_id], references: [id], onDelete: Cascade)
}

//[success] actual
model Usuario {
  id                        Int                                     @id @default(autoincrement())
  email                     String
  dni                       String                                  @unique
  nombre_completo           String
  telefono                  String
  limite_proyecto           Int                                     @default(1)
  limite_usuarios           Int
  estado                    E_Estado_BD?                            @default(n)
  eliminado                 E_Estado_BD                             @default(n)
  contrasena                String
  fecha_creacion            DateTime                                @default(now())
  rol_id                    Int
  Rol                       Rol                                     @relation(fields: [rol_id], references: [id], onDelete: Cascade)
  Empresa                   Empresa[]
  DetalleUsuarioEmpresa     DetalleUsuarioEmpresa[]
  Partida                   Partida[]
  ManoObra                  ManoObra[]
  DetalleUsuarioProyecto    DetalleUsuarioProyecto[]
  Trabajo                   Trabajo[]
  IngenieroMaestroObra      DetalleIngenieroProduccionMaestroObra[] @relation("IngenieroRelation")
  MaestroObra               DetalleIngenieroProduccionMaestroObra[] @relation("MaestroObraRelation")
  MaestroDeObra             DetalleMaestroObraCapataz[]             @relation("MaestroDeObra")
  Capataz                   DetalleMaestroObraCapataz[]             @relation("Capataz")
  CapatazJefe               DetalleCapatazJefeGrupo[]               @relation("CapatazJefe")
  JefeGrupo                 DetalleCapatazJefeGrupo[]               @relation("JefeGrupo")
  DetalleMaestroObraCapataz DetalleMaestroObraCapataz[]
}

model DetalleIngenieroProduccionMaestroObra {
  id                      Int      @id @default(autoincrement())
  usuario_ingeniero_id    Int
  usuario_maestro_obra_id Int
  fecha_creacion          DateTime @default(now())
  proyecto_id             Int
  Proyecto                Proyecto @relation(fields: [proyecto_id], references: [id], onDelete: Cascade)
  Ingeniero               Usuario  @relation("IngenieroRelation", fields: [usuario_ingeniero_id], references: [id], onDelete: Cascade)
  MaestroObra             Usuario  @relation("MaestroObraRelation", fields: [usuario_maestro_obra_id], references: [id], onDelete: Cascade)
}

model DetalleMaestroObraCapataz {
  id                 Int      @id @default(autoincrement())
  usuario_mo_id      Int
  usuario_capataz_id Int
  fecha_creacion     DateTime @default(now())
  proyecto_id        Int
  Proyecto           Proyecto @relation(fields: [proyecto_id], references: [id], onDelete: Cascade)
  MaestroDeObra      Usuario  @relation("MaestroDeObra", fields: [usuario_mo_id], references: [id], onDelete: Cascade)
  Capataz            Usuario  @relation("Capataz", fields: [usuario_capataz_id], references: [id], onDelete: Cascade)
  Usuario            Usuario? @relation(fields: [usuarioId], references: [id], onDelete: Cascade)
  usuarioId          Int?
}

model DetalleCapatazJefeGrupo {
  id                    Int      @id @default(autoincrement())
  usuario_capataz_id    Int
  usuario_jefe_grupo_id Int
  fecha_creacion        DateTime @default(now())
  proyecto_id           Int
  Proyecto              Proyecto @relation(fields: [proyecto_id], references: [id], onDelete: Cascade)
  CapatazJefe           Usuario  @relation("CapatazJefe", fields: [usuario_capataz_id], references: [id], onDelete: Cascade)
  JefeGrupo             Usuario  @relation("JefeGrupo", fields: [usuario_jefe_grupo_id], references: [id], onDelete: Cascade)
}

//[success] actual
model DetalleUsuarioEmpresa {
  id         Int     @id @default(autoincrement())
  usuario_id Int
  empresa_id Int
  Usuario    Usuario @relation(fields: [usuario_id], references: [id], onDelete: Cascade)
  Empresa    Empresa @relation(fields: [empresa_id], references: [id], onDelete: Cascade)
}

model DetalleUsuarioProyecto {
  id          Int      @id @default(autoincrement())
  usuario_id  Int
  projecto_id Int
  Usuario     Usuario  @relation(fields: [usuario_id], references: [id], onDelete: Cascade)
  Proyecto    Proyecto @relation(fields: [projecto_id], references: [id], onDelete: Cascade)
}

//[success] actual
model Empresa {
  id                    Int                     @id @default(autoincrement())
  nombre_empresa        String
  descripcion_empresa   String?
  ruc                   String?
  direccion_fiscal      String
  direccion_oficina     String
  nombre_corto          String?
  telefono              String
  correo                String
  contacto_responsable  String
  usuario_id            Int
  fecha_creacion        DateTime                @default(now())
  eliminado             E_Estado_BD             @default(n)
  DetalleUsuarioEmpresa DetalleUsuarioEmpresa[]
  Usuario               Usuario                 @relation(fields: [usuario_id], references: [id], onDelete: Cascade)
  Proyecto              Proyecto[]
  Unidad                Unidad[]
  IndiceUnificado       IndiceUnificado[]
  DetalleSemanaProyecto DetalleSemanaProyecto[]
}

//[Success]actual
model Semana {
  id                    Int                     @id @default(autoincrement())
  codigo                String
  fecha_inicio          DateTime
  fecha_fin             DateTime
  DetalleSemanaProyecto DetalleSemanaProyecto[]
}

model DetalleSemanaProyecto {
  id          Int      @id @default(autoincrement())
  semana_id   Int
  empresa_id  Int
  proyecto_id Int
  cierre      Boolean
  Semana      Semana   @relation(fields: [semana_id], references: [id], onDelete: Cascade)
  Empresa     Empresa  @relation(fields: [empresa_id], references: [id], onDelete: Cascade)
  Proyecto    Proyecto @relation(fields: [proyecto_id], references: [id], onDelete: Cascade)
}

//[success] actual
model ManoObra {
  id                     Int             @id @default(autoincrement())
  //[Note] Estos datos serán los de la primera etapa
  codigo                 String
  documento_identidad    String
  nombre_completo        String
  categoria_obrero_id    Int?
  especialidad_obrero_id Int?
  unidad_id              Int
  fecha_inicio           DateTime?       @db.Date //año más dia
  fecha_cese             DateTime?       @db.Date //año más dia
  estado                 E_Estado_MO_BD? @default(ACTIVO)
  fecha_nacimiento       DateTime?       @db.Date //año más dia
  escolaridad            String?
  telefono               String?
  email_personal         String?
  observacion            String?         @db.Text()
  eliminado              E_Estado_BD     @default(n)
  fecha_creacion         DateTime        @default(now())
  apellido_materno       String?
  apellido_paterno       String?
  genero                 String?
  estado_civil           String?
  //[message] POSIBLEMENTE TENGA QUE REGISTRARSE TAMBIÉN ESTE CAMPO "DIRECCIÓN " EN PLANILLA
  direccion              String?
  domicilio              String?
  lugar_nacimiento       String?

  //[Note] Los de abajo son para otra etapa
  tipo_obrero_id     Int?
  origen_obrero_id   Int?
  banco_id           Int?
  cuenta             String? @db.Text()
  turno              String?
  sede_local         String?
  usuario_marcacion  String? @default("")
  tipo_documento     String?
  contrasena         String?
  profesion          String?
  n_libreta_militar  String?
  n_pasaporte        String?
  email_corporativo  String?
  brevete            String?
  grado_instruccion  String?
  ruc                String?
  tipo_cese          String?
  carnet_extranjeria String?
  condicion          String? //por ejemplo inválido 
  pais_origen        String?
  hora_ingreso       String?
  hora_salida        String?
  tolerancia_ingreso String?
  tiempo_refrigerio  String?
  usuario_id         Int? // aca es el responsable

  proyecto_id                 Int
  Proyecto                    Proyecto                      @relation(fields: [proyecto_id], references: [id], onDelete: Cascade)
  Usuario                     Usuario?                      @relation(fields: [usuario_id], references: [id], onDelete: Cascade)
  Banco                       Banco?                        @relation(fields: [banco_id], references: [id], onDelete: Cascade)
  Unidad                      Unidad                        @relation(fields: [unidad_id], references: [id], onDelete: Cascade)
  Asistencia                  Asistencia[]
  CategoriaObrero             CategoriaObrero?              @relation(fields: [categoria_obrero_id], references: [id], onDelete: Cascade)
  EspecialidadObra            EspecialidadObrero?           @relation(fields: [especialidad_obrero_id], references: [id], onDelete: Cascade)
  TipoObrero                  TipoObrero?                   @relation(fields: [tipo_obrero_id], references: [id], onDelete: Cascade)
  OrigenObrero                OrigenObrero?                 @relation(fields: [origen_obrero_id], references: [id], onDelete: Cascade)
  ParteDiarioMo               ParteDiarioMO[]
  ManoObraDatoLaboral         ManoObraDatoLaboral[]
  ManoObraSemana              ManoObraSemana[]
  ManoObraComposicionFamiliar ManoObraComposicionFamiliar[]
  ManoObraExperienciaLaboral  ManoObraExperienciaLaboral[]
  ManoObraEstudios            ManoObraEstudios[]
  detalle_combo_mo            detalle_combo_mo[]
}

//[success] actual
model CategoriaObrero {
  id                  Int                   @id @default(autoincrement())
  nombre              String
  fecha_creacion      DateTime              @default(now())
  eliminado           E_Estado_BD           @default(n)
  proyecto_id         Int
  Proyecto            Proyecto              @relation(fields: [proyecto_id], references: [id], onDelete: Cascade)
  ManoObra            ManoObra[]
  DetallePrecioHoraMO DetallePrecioHoraMO[]
}

//[success] actual 
model TipoObrero {
  id             Int         @id @default(autoincrement())
  nombre         String
  fecha_creacion DateTime    @default(now())
  eliminado      E_Estado_BD @default(n)
  proyecto_id    Int
  Proyecto       Proyecto    @relation(fields: [proyecto_id], references: [id], onDelete: Cascade)
  ManoObra       ManoObra[]
}

//[success] actual
model OrigenObrero {
  id             Int         @id @default(autoincrement())
  nombre         String
  fecha_creacion DateTime    @default(now())
  eliminado      E_Estado_BD @default(n)
  proyecto_id    Int
  Proyecto       Proyecto    @relation(fields: [proyecto_id], references: [id], onDelete: Cascade)
  ManoObra       ManoObra[]
}

//[success] actual
model EspecialidadObrero {
  id             Int         @id @default(autoincrement())
  nombre         String
  fecha_creacion DateTime    @default(now())
  eliminado      E_Estado_BD @default(n)
  proyecto_id    Int
  Proyecto       Proyecto    @relation(fields: [proyecto_id], references: [id], onDelete: Cascade)
  ManoObra       ManoObra[]
}

model Banco {
  id          Int         @id @default(autoincrement())
  nombre      String
  eliminado   E_Estado_BD @default(n)
  proyecto_id Int
  Proyecto    Proyecto    @relation(fields: [proyecto_id], references: [id], onDelete: Cascade)
  ManoObra    ManoObra[]
}

//[note] modulo futuro
//si trabajas hoy o no para el trabajador
model ManoObraSemana {
  id             Int         @id @default(autoincrement())
  lunes          E_Estado_BD @default(y)
  martes         E_Estado_BD @default(y)
  miercoles      E_Estado_BD @default(y)
  jueves         E_Estado_BD @default(y)
  viernes        E_Estado_BD @default(y)
  sabado         E_Estado_BD @default(y)
  domingo        E_Estado_BD @default(y)
  fecha_creacion DateTime    @default(now())
  mano_obra_id   Int
  ManoObra       ManoObra    @relation(fields: [mano_obra_id], references: [id], onDelete: Cascade)
}

//[note] modulo futuro
model ManoObraDatoLaboral {
  id                       Int                            @id @default(autoincrement())
  seccion_id               Int
  area_mo_id               Int
  mano_obra_id             Int
  puesto_id                Int
  fecha_creacion           DateTime                       @default(now())
  // OJO PUEDE CAMBIARSE POR LA BBDD PARA EL RENDIMIENTO
  categoria_salarial_id    E_Categoria_Salarial_Obrero_BD
  departamento_mo_id       Int
  fecha_ingreso_planilla   DateTime                       @db.Date
  //revisar lo de truncas
  fecha_vacaciones_truncas DateTime                       @db.Date
  //afp o onp
  tipo_afiliacion          String
  PuestoObrero             PuestoObrero                   @relation(fields: [puesto_id], references: [id], onDelete: Cascade)
  DepartamentoObrero       DepartamentoObrero             @relation(fields: [departamento_mo_id], references: [id], onDelete: Cascade)
  AreaObrero               AreaObrero                     @relation(fields: [area_mo_id], references: [id], onDelete: Cascade)
  ManoObra                 ManoObra                       @relation(fields: [mano_obra_id], references: [id], onDelete: Cascade)
  SeccionObrero            SeccionObrero                  @relation(fields: [seccion_id], references: [id], onDelete: Cascade)
}

//[note] modulo futuro
model ManoObraComposicionFamiliar {
  id                    Int                  @id @default(autoincrement())
  apellido_materno      String
  apellido_paterno      String
  nombres               String
  tipo_parentesco       E_TIPO_PARENTESCO_BD
  acta_matrimonial      String
  fecha_nacimiento      DateTime             @db.Date()
  estado_civil          String
  genero                String
  vive                  E_Estado_BD
  partida_difuncion     String
  tipo_documento        String
  documento_identidad   String
  grado_instruccion     String
  fecha_creacion        DateTime             @default(now())
  //si vive en otro lugar 
  vive_otro_domicilio   E_Estado_BD
  direccion             String
  asegurado             E_Estado_BD
  no_independiente      E_Estado_BD
  ocupacion             String
  ingreso_mensual       Float
  centro_trabajo        String
  incapacitado          E_Estado_BD
  documento_incapacidad String
  mano_obra_id          Int
  ManoObra              ManoObra             @relation(fields: [mano_obra_id], references: [id], onDelete: Cascade)
}

//[note] modulo futuro
model ManoObraExperienciaLaboral {
  id             Int      @id @default(autoincrement())
  desde          DateTime @db.Date
  hasta          DateTime @db.Date
  tipo_contrato  String
  tipo_cese      String
  remuneracion   Float
  logros         String?
  fecha_creacion DateTime @default(now())
  mano_obra_id   Int
  ManoObra       ManoObra @relation(fields: [mano_obra_id], references: [id], onDelete: Cascade)
}

//[note] modulo futuro
model ManoObraEstudios {
  id             Int      @id @default(autoincrement())
  tipo_estudio   String
  desde          DateTime @db.Date
  hasta          DateTime @db.Date
  nivel_obtenido String
  centro_estudio String
  lugar_estudio  String
  institucion    String
  especialidad   String?
  fecha_creacion DateTime @default(now())
  mano_obra_id   Int
  ManoObra       ManoObra @relation(fields: [mano_obra_id], references: [id], onDelete: Cascade)
}

//[note] modulo futuro
model PuestoObrero {
  id                  Int                   @id @default(autoincrement())
  nombre              String
  fecha_creacion      DateTime              @default(now())
  ManoObraDatoLaboral ManoObraDatoLaboral[]
}

//[success] actual
model SeccionObrero {
  id                  Int                   @id @default(autoincrement())
  nombre              String
  fecha_creacion      DateTime              @default(now())
  proyecto_id         Int
  Proyecto            Proyecto              @relation(fields: [proyecto_id], references: [id], onDelete: Cascade)
  ManoObraDatoLaboral ManoObraDatoLaboral[]
}

//[success] actual
model DepartamentoObrero {
  id                  Int                   @id @default(autoincrement())
  nombre              String
  fecha_creacion      DateTime              @default(now())
  proyecto_id         Int
  Proyecto            Proyecto              @relation(fields: [proyecto_id], references: [id], onDelete: Cascade)
  ManoObraDatoLaboral ManoObraDatoLaboral[]
}

//[success] actual
model AreaObrero {
  id                  Int                   @id @default(autoincrement())
  fecha_creacion      DateTime              @default(now())
  proyecto_id         Int
  Proyecto            Proyecto              @relation(fields: [proyecto_id], references: [id], onDelete: Cascade)
  ManoObraDatoLaboral ManoObraDatoLaboral[]
}

//[success] actual
model Proyecto {
  id                                 Int                                     @id @default(autoincrement())
  nombre_completo                    String                                  @db.Text()
  descripcion                        String?                                 @db.Text()
  direccion                          String
  nombre_consorcio                   String
  nombre_corto                       String
  costo_proyecto                     Float
  estado                             E_Proyecto_Estado
  eliminado                          E_Estado_BD                             @default(n)
  fecha_inicio                       DateTime                                @db.Date()
  fecha_fin                          DateTime                                @db.Date()
  fecha_creacion                     DateTime                                @default(now())
  plazo_proyecto                     String
  color_primario                     String?                                 @default("000000")
  color_personalizado                String?                                 @default("000000")
  color_linea                        String?                                 @default("000000")
  color_detalle                      String?                                 @default("000000")
  color_menu                         String?                                 @default("000000")
  color_submenu                      String?                                 @default("000000")
  codigo_proyecto                    String
  empresa_id                         Int
  Empresa                            Empresa                                 @relation(fields: [empresa_id], references: [id], onDelete: Cascade)
  UnidadProduccion                   UnidadProduccion[]
  Tren                               Tren[]
  Partida                            Partida[]
  SeccionObrero                      SeccionObrero[]
  DepartamentoObrero                 DepartamentoObrero[]
  AreaObrero                         AreaObrero[]
  Combo                              Combo[]
  ParteDiario                        ParteDiario[]
  ManoObra                           ManoObra[]
  Trabajo                            Trabajo[]
  Recurso                            Recurso[]
  Unidad                             Unidad[]
  Asistencia                         Asistencia[]
  PrecioHoraMO                       PrecioHoraMO[]
  ReporteTren                        ReporteTren[]
  ReportePartida                     ReportePartida[]
  CategoriaObrero                    CategoriaObrero[]
  TipoObrero                         TipoObrero[]
  OrigenObrero                       OrigenObrero[]
  EspecialidadObrero                 EspecialidadObrero[]
  RiesgoParteDiario                  RiesgoParteDiario[]
  ParteDiarioMO                      ParteDiarioMO[]
  ParteDiarioRecurso                 ParteDiarioRecurso[]
  DetalleUsuarioProyecto             DetalleUsuarioProyecto[]
  DetalleSemanaProyecto              DetalleSemanaProyecto[]
  Banco                              Banco[]
  IndiceUnificado                    IndiceUnificado[]
  CategoriaRecurso                   CategoriaRecurso[]
  DetalleIngenieroProduccionManoObra DetalleIngenieroProduccionMaestroObra[]
  DetalleManoObraCapataz             DetalleMaestroObraCapataz[]
  DetalleCapatazJefeGrupo            DetalleCapatazJefeGrupo[]
}

model Combo {
  id               Int                @id @default(autoincrement())
  nombre           String
  fecha_creacion   DateTime           @default(now())
  detalle_combo_mo detalle_combo_mo[]
  proyecto_id      Int
  Proyecto         Proyecto?          @relation(fields: [proyecto_id], references: [id], onDelete: Cascade)
}

model detalle_combo_mo {
  id       Int      @id @default(autoincrement())
  combo_id Int
  mo_id    Int
  ManoObra ManoObra @relation(fields: [mo_id], references: [id], onDelete: Cascade)
  Combo    Combo    @relation(fields: [combo_id], references: [id], onDelete: Cascade)
}

//[success] actual
model UnidadProduccion {
  id             Int         @id @default(autoincrement())
  codigo         String
  nombre         String
  nota           String?     @db.Text()
  eliminado      E_Estado_BD @default(n)
  fecha_creacion DateTime    @default(now())
  proyecto_id    Int
  Proyecto       Proyecto    @relation(fields: [proyecto_id], references: [id], onDelete: Cascade)
  Trabajo        Trabajo[]
}

//[success] actual
model Tren {
  id             Int           @id @default(autoincrement())
  codigo         String
  nombre         String
  nota           String?       @db.Text()
  operario       Int
  oficial        Int
  peon           Int
  fecha_creacion DateTime      @default(now())
  eliminado      E_Estado_BD   @default(n)
  proyecto_id    Int
  ReporteTren    ReporteTren[]
  Trabajo        Trabajo[]
  Proyecto       Proyecto      @relation(fields: [proyecto_id], references: [id], onDelete: Cascade)
}

//[success] actual
model Partida {
  id                    Int                     @id @default(autoincrement())
  id_interno            String
  item                  String
  partida               String
  metrado_inicial       Float
  metrado_total         Float
  precio                Float
  parcial               Float                   @default(0)
  mano_de_obra_unitaria Float
  material_unitario     Float
  equipo_unitario       Float
  subcontrata_varios    Float
  fecha_creacion        DateTime                @default(now())
  eliminado             E_Estado_BD             @default(n)
  unidad_id             Int?
  usuario_id            Int
  proyecto_id           Int
  Unidad                Unidad?                 @relation(fields: [unidad_id], references: [id], onDelete: Cascade)
  Usuario               Usuario                 @relation(fields: [usuario_id], references: [id], onDelete: Cascade)
  ReportePartida        ReportePartida[]
  Proyecto              Proyecto                @relation(fields: [proyecto_id], references: [id], onDelete: Cascade)
  DetalleTrabajoPartida DetalleTrabajoPartida[]
}

//[success] actual
model Trabajo {
  id                    Int                     @id @default(autoincrement())
  codigo                String
  nombre                String
  duracion              Float
  fecha_inicio          DateTime                @db.Date //año más dia
  fecha_finalizacion    DateTime                @db.Date //año más dia
  eliminado             E_Estado_BD             @default(n)
  fecha_creacion        DateTime                @default(now())
  nota                  String?
  costo_partida         Int
  costo_mano_obra       Int
  costo_material        Int
  costo_equipo          Int
  costo_varios          Int
  tren_id               Int
  estado_trabajo        E_Trabajo_Estado        @default(PROGRAMADO)
  up_id                 Int
  proyecto_id           Int
  usuario_id            Int
  Usuario               Usuario                 @relation(fields: [usuario_id], references: [id], onDelete: Cascade)
  Proyecto              Proyecto                @relation(fields: [proyecto_id], references: [id], onDelete: Cascade)
  Tren                  Tren                    @relation(fields: [tren_id], references: [id], onDelete: Cascade)
  UnidadProduccion      UnidadProduccion        @relation(fields: [up_id], references: [id], onDelete: Cascade)
  ParteDiario           ParteDiario[]
  DetalleTrabajoPartida DetalleTrabajoPartida[]
}

//[success] actual
model DetalleTrabajoPartida {
  id                Int     @id @default(autoincrement())
  trabajo_id        Int
  partida_id        Int
  metrado_utilizado Float
  Trabajo           Trabajo @relation(fields: [trabajo_id], references: [id], onDelete: Cascade)
  Partida           Partida @relation(fields: [partida_id], references: [id], onDelete: Cascade)
}

//[success] actual
model Recurso {
  id                   Int                  @id @default(autoincrement())
  codigo               String
  nombre               String
  eliminado            E_Estado_BD          @default(n)
  precio               Float?
  fecha_creacion       DateTime             @default(now())
  unidad_id            Int
  id_unificado         Int
  proyecto_id          Int
  Proyecto             Proyecto             @relation(fields: [proyecto_id], references: [id], onDelete: Cascade)
  Unidad               Unidad               @relation(fields: [unidad_id], references: [id], onDelete: Cascade)
  IndiceUnificado      IndiceUnificado      @relation(fields: [id_unificado], references: [id], onDelete: Cascade)
  categoria_recurso_id Int
  CategoriaRecurso     CategoriaRecurso     @relation(fields: [categoria_recurso_id], references: [id], onDelete: Cascade)
  ParteDiarioRecurso   ParteDiarioRecurso[]
}

model Unidad {
  id             Int         @id @default(autoincrement())
  codigo         String
  nombre         String
  simbolo        String?
  empresa_id     Int
  proyecto_id    Int
  Proyecto       Proyecto    @relation(fields: [proyecto_id], references: [id], onDelete: Cascade)
  Empresa        Empresa     @relation(fields: [empresa_id], references: [id], onDelete: Cascade)
  fecha_creacion DateTime    @default(now())
  eliminado      E_Estado_BD @default(n)
  Partida        Partida[]
  Recurso        Recurso[]
  ManoObra       ManoObra[]
}

model IndiceUnificado {
  id             Int         @id @default(autoincrement())
  codigo         String
  nombre         String
  simbolo        String?
  comentario     String?
  empresa_id     Int
  proyect_id     Int
  fecha_creacion DateTime    @default(now())
  Proyecto       Proyecto    @relation(fields: [proyect_id], references: [id], onDelete: Cascade)
  Empresa        Empresa     @relation(fields: [empresa_id], references: [id], onDelete: Cascade)
  Recurso        Recurso[]
  eliminado      E_Estado_BD @default(n)
}

//[success] actual
model CategoriaRecurso {
  id             Int         @id @default(autoincrement())
  codigo         String
  nombre         String
  fecha_creacion DateTime    @default(now())
  proyecto_id    Int
  Proyecto       Proyecto    @relation(fields: [proyecto_id], references: [id], onDelete: Cascade)
  eliminado      E_Estado_BD @default(n)
  Recurso        Recurso[]
}

enum E_Asistencia_BD {
  F
  A
}

enum E_Estado_Asistencia_BD {
  ASIGNADO
  NO_ASIGNADO
  FALTA
  DOBLEMENTE_ASIGNADO
}

//[success] actual
model Asistencia {
  id                  Int                    @id @default(autoincrement())
  fecha               DateTime
  horas               Float
  horas_registradas   Float?                 @default(0)
  horas_60            Float?                 @default(0)
  horas_100           Float?                 @default(0)
  estado_asignacion   E_Estado_Asistencia_BD @default(FALTA)
  asistencia          E_Asistencia_BD        @default(F)
  horas_extras_estado E_Estado_BD?           @default(n)
  fecha_creacion      DateTime               @default(now())
  eliminado           E_Estado_BD            @default(n)
  mano_obra_id        Int
  proyecto_id         Int
  Proyecto            Proyecto               @relation(fields: [proyecto_id], references: [id], onDelete: Cascade)
  ManoObra            ManoObra               @relation(fields: [mano_obra_id], references: [id], onDelete: Cascade)
}

//[success] actual
model ParteDiario {
  id                     Int                  @id @default(autoincrement())
  nombre                 String //
  fecha                  DateTime?            @db.Date()
  etapa                  String?
  jornada                String?
  fecha_creacion         DateTime             @default(now())
  hora_inicio            String?
  hora_fin               String?
  descripcion_actividad  String?              @db.Text()
  nota                   String?              @db.Text()
  distanciamiento        E_Estado_BD?
  protocolo_ingreso      E_Estado_BD?
  protocolo_salida       E_Estado_BD?
  eliminado              E_Estado_BD          @default(n)
  riesto_parte_diario_id Int?
  trabajo_id             Int
  proyecto_id            Int
  Proyecto               Proyecto             @relation(fields: [proyecto_id], references: [id], onDelete: Cascade)
  RiesgoParteDiario      RiesgoParteDiario?   @relation(fields: [riesto_parte_diario_id], references: [id], onDelete: Cascade)
  Trabajo                Trabajo              @relation(fields: [trabajo_id], references: [id], onDelete: Cascade)
  ParteDiarioMo          ParteDiarioMO[]
  ParteDiarioRecurso     ParteDiarioRecurso[]
}

//[success] actual
model RiesgoParteDiario {
  id             Int                @id @default(autoincrement())
  descripcion    String
  estado         E_Estado_Riesgo_BD
  riesgo         E_Riesgo_BD
  fecha_creacion DateTime           @default(now())
  proyecto_id    Int
  Proyecto       Proyecto           @relation(fields: [proyecto_id], references: [id], onDelete: Cascade)
  ParteDiario    ParteDiario[]
}

//[success] actual
model ParteDiarioMO {
  id              Int         @id @default(autoincrement())
  hora_inicio     Float
  hora_fin        Float
  hora_parcial    Float
  hora_normal     Float
  hora_60         Float
  hora_100        Float
  parte_diario_id Int
  mano_obra_id    Int
  fecha_creacion  DateTime    @default(now())
  proyecto_id     Int
  Proyecto        Proyecto    @relation(fields: [proyecto_id], references: [id], onDelete: Cascade)
  ParteDiario     ParteDiario @relation(fields: [parte_diario_id], references: [id], onDelete: Cascade)
  ManoObra        ManoObra    @relation(fields: [mano_obra_id], references: [id], onDelete: Cascade)
}

//[success] actual
model ParteDiarioRecurso {
  id              Int         @id @default(autoincrement())
  parte_diario_id Int
  recurso_id      Int
  cantidad        Int
  fecha_creacion  DateTime    @default(now())
  ParteDiario     ParteDiario @relation(fields: [parte_diario_id], references: [id], onDelete: Cascade)
  proyecto_id     Int
  Proyecto        Proyecto    @relation(fields: [proyecto_id], references: [id], onDelete: Cascade)
  Recurso         Recurso     @relation(fields: [recurso_id], references: [id], onDelete: Cascade)
}

//[success] actual
model PrecioHoraMO {
  id                  Int                   @id @default(autoincrement())
  fecha_inicio        DateTime              @db.Date()
  fecha_fin           DateTime              @db.Date()
  fecha_creacion      DateTime              @default(now())
  nombre              String
  proyecto_id         Int
  Proyecto            Proyecto              @relation(fields: [proyecto_id], references: [id], onDelete: Cascade)
  DetallePrecioHoraMO DetallePrecioHoraMO[]
}

//[success] actual
model DetallePrecioHoraMO {
  id                  Int             @id @default(autoincrement())
  hora_normal         Float
  hora_extra_60       Float
  hora_extra_100      Float
  categoria_obrero_id Int
  precio_hora_mo_id   Int
  eliminado           E_Estado_BD     @default(n)
  PrecioHoraMO        PrecioHoraMO    @relation(fields: [precio_hora_mo_id], references: [id])
  CategoriaObrero     CategoriaObrero @relation(fields: [categoria_obrero_id], references: [id])
}

//[success] actual
model ReporteTren {
  id             Int      @id @default(autoincrement())
  costo_total    Float
  costo_anterior Float
  costo_actual   Float
  costo_parcial  Float
  saldo          Float?   @default(0)
  lunes          Float?   @default(0)
  martes         Float?   @default(0)
  miercoles      Float?   @default(0)
  jueves         Float?   @default(0)
  viernes        Float?   @default(0)
  sabado         Float?   @default(0)
  domingo        Float?   @default(0)
  fecha_inicio   DateTime @db.Date()
  fecha_fin      DateTime @db.Date()
  fecha_creacion DateTime @default(now())
  tren_id        Int
  Tren           Tren     @relation(fields: [tren_id], references: [id], onDelete: Cascade)
  proyecto_id    Int
  Proyecto       Proyecto @relation(fields: [proyecto_id], references: [id], onDelete: Cascade)
}

//[success] actual
model ReportePartida {
  id             Int      @id @default(autoincrement())
  costo_total    Float
  costo_anterior Float
  costo_actual   Float
  costo_parcial  Float
  fecha_creacion DateTime @default(now())
  partida_id     Int
  Partida        Partida  @relation(fields: [partida_id], references: [id], onDelete: Cascade)
  proyecto_id    Int
  Proyecto       Proyecto @relation(fields: [proyecto_id], references: [id], onDelete: Cascade)
}
